#!/usr/bin/env bash

# dd-create-brew-package
#
# create brew package
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-07-08


echo
echo 'dd-create-brew-package:'
echo

# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

# NOTE: technically, brew packages can be built on Linux as much as on OS X;
# restricting execution platforms to OS X here keeps things a lot simpler:
# if this runs on OS X only, we will not encounter both brew and Debian packages

case "${OSTYPE}" in
    darwin*)
        # http://stackoverflow.com/a/12405621
        :
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi


# TODO: error handling; access project config file only once
# TODO: prevent processing repo this file is in during development ?
# TODO: verify required executables are available before using them ?
# TODO: script return value when run as Jenkins job ?!?
# TODO: check target project git repo status and flag output if unclean


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to the root folder of the repository to process
# on Debian, install realpath using e.g. aptitude install realpath
# on OS X, use grealpath: http://apple.stackexchange.com/a/88812
repo_root="$(realpath "$1")"

# absolute path to target project configuration
project_conf="${repo_root}/project.conf"

if [ ! -e "${project_conf}" ]
then
    echo "Failed to find project configuration ${project_conf}"
    exit 1
fi

# name of target project
project_name="$(  jq -r '.Project'             "${project_conf}")"

# mirror folder with scripts to install, relative to target project root
# TODO: review this approach, make it more generic
mirror_folder="$( jq -r '.Paths.mirror_folder' "${project_conf}")"

# package output folder, relative to target project root;
# this is where the finished package will be stored for scripts that follow
package_folder="$(jq -r '.Artifacts.packages'  "${project_conf}")"

# major minor patch project / package version
major_version="$( jq -r '.Version.major'       "${project_conf}")"
minor_version="$( jq -r '.Version.minor'       "${project_conf}")"
patch_version="$( jq -r '.Version.patch'       "${project_conf}")"


# package name is project name in lower case and camel case
# amended by dashes, e.g. ReleaseTools --> release-tools:
# https://github.com/Homebrew/brew/blob/master/ ...
#  ... docs/Formula-Cookbook.md#a-quick-word-on-naming
# https://stackoverflow.com/a/10218742
# https://stackoverflow.com/a/10757348
package_name="$( echo "${project_name::1}" | tr '[:upper:]' '[:lower:]')"
package_name+="$(echo "${project_name:1}"  | sed -e 's|\([A-Z]\)|-\1|g' \
                                           | tr '[:upper:]' '[:lower:]')"

# brew package version
version="${major_version}.${minor_version}.${patch_version}"

# git archive format; see git archive --list for supported formats
archive_format='tar.gz'

# archive file name: package name plus version and archive format
#
# sample brew package archive names:
# alexa:~ ansible$ ls -lA ~/Library/Caches/Homebrew \
#   | grep -v sierra.bottle | show-a-few-interesting-ones
# -rw-r--r--   1 ansible  staff     141708 May 19  2017 ack-2.18.18-single-file
# -rw-r--r--   1 ansible  staff     140976 Jan  4 05:10 ack-2.22.22-single-file
# -rw-r--r--   1 ansible  staff    4877980 Dec 25 19:06 doxygen-1.8.14.tar.gz
# -rw-r--r--   1 ansible  staff    8442832 Sep  5 23:43 gammaray-2.8.1.tar.gz
# -rw-r--r--   1 ansible  staff    8438766 Feb  1 16:07 gammaray-2.8.2.tar.gz
# -rw-r--r--   1 ansible  staff    9662773 Feb  8 17:32 gammaray-2.9.0.tar.gz
# -rw-r--r--   1 ansible  staff   12495628 Dec 17  2016 python-2.7.13.tar.xz
# -rw-r--r--   1 ansible  staff   12576112 Sep 16 20:01 python-2.7.14.tar.xz
# -rw-r--r--   1 ansible  staff  408346584 Dec  5 08:31 qt-5.10.0.tar.xz
# -rw-r--r--   1 ansible  staff   11437264 Dec 23 08:17 rabbitmq-3.7.2.tar.xz
# -rw-r--r--   1 ansible  staff   11444792 Jan 30 12:02 rabbitmq-3.7.3.tar.xz
# -rw-r--r--   1 ansible  staff    2016749 Jan 29 08:52 yaml-cpp-0.5.3.tar.gz
# -rw-r--r--   1 ansible  staff    1396262 Feb  4 14:52 yaml-cpp-0.6.1.tar.gz
#
# NOTE: brew renames downloaded archives including any suffixes, e.g.
#   https://gitlab.com/DesmoDyne/Tools/ ...
#    ... ReleaseTools/repository/archive.tar.gz?ref=0.2.1&private_token=<snip>
# to match its own convention, e.g.
#   /Users/ansible/Library/Caches/Homebrew/ ...
#    ... release-tools-0.2.1.1&private_token=<snip>
#
# TODO: this must be in sync with dd-create-brew-package
# (and possibly others) --> get this from elsewhere (?)
archive_name="${package_name}-${version}.${archive_format}"

# package build folder, relative to target project root;
# this is a temporary folder with copies of files that go into the package
pkg_bld_folder="$(jq -r '.Paths.package_build_folder' "${project_conf}")"


# -----------------------------------------------------------------------------
# create brew package


# change to target project root directory
if ! pushd "${repo_root}" > /dev/null
then
    echo "Failed to pushd to repository root ${repo_root}"
    exit 1
fi


# delete files OS X keeps creating so they are not added to the package;
# this occurs with project spaces shared between OSs, e.g. using sshfs
# TODO: is this really required ? use dd-clean for that ?!?
find . \( -iname '._*' -or -iname '.DS_Store' \) -delete

# remove and (re-) create package build and output folders

if [ -d "${pkg_bld_folder}" ]
then
    rm -r "${pkg_bld_folder}"
fi

mkdir -p "${pkg_bld_folder}"

if [ -d "${package_folder}" ]
then
    rm -r "${package_folder}"
fi

mkdir -p "${package_folder}"


if ! cp -a "${mirror_folder}" "${pkg_bld_folder}/"
then
    echo "Failed to copy ${mirror_folder} to ${pkg_bld_folder}/"
    exit 1
fi

# change to package build directory
if ! pushd "${pkg_bld_folder}" > /dev/null
then
    echo "Failed to pushd to package build directory ${pkg_bld_folder}"
    exit 1
fi

# TODO: support other archive formats
# TODO: review paths
if ! tar -czf "${repo_root}/${package_folder}/${archive_name}" .
then
    echo "Failed to create package archive"
    exit 1
fi

# change back to previous location
if ! popd > /dev/null
then
    echo "Failed to popd from package build directory ${pkg_bld_folder}"
    exit 1
fi


# change back to previous location
if ! popd > /dev/null
then
    echo "Failed to popd from repository root ${repo_root}"
    exit 1
fi


echo
echo "dd-create-brew-package: success"
echo
