#!/usr/bin/env bash

# dd-bump-patch-version
#
# increase version number patch level by 1
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-03


# MAJOR.MINOR.PATCH versioning: http://semver.org
# https://en.wikipedia.org/wiki/Software_versioning


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

# NOTE: on OS X, install GNU sed and grep using
# brew tap homebrew/dupes; brew install gnu-sed grep
# http://apple.stackexchange.com/a/69332

case "${OSTYPE}" in
    darwin*)
        grep='ggrep'
        sed='gsed'
        ;;
    linux*)
        grep='grep'
        sed='sed'
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi

# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to root folder of repository to process
repo_root="$(realpath "$1")"

# path to multi-package project configuration
# root folder, relative to root of target project
path_to_multi_proj_root="packages"

# path to project configuration file, relative to root of target project
path_to_proj_conf="build/CMakeLists.txt"

# regular expression pattern for line defining patch version
patch_regex='(set\(CPACK_PACKAGE_VERSION_PATCH\s+")([0-9]+)("\))'

# message for committing changes to project configuration file
# TODO: add project and release names ?
commit_message='[#1]: bump patch version'


# -----------------------------------------------------------------------------
# declare functions

function bump_patch_version
{
    project_config="$1"

    # verify project configuration exists before accessing it
    if [ ! -f "${project_config}" ]
    then
        echo "Failed to find project configuration file: ${project_config}"
        return 1
    fi

    # TODO: verify this works with relative paths passed as cmd line argument
    # TODO: prevent processing conf of this project during development ?
    # TODO: verify required executables are available before using them ?
    # TODO: script return value when run as Jenkins job ?!?

    # get line with current patch version
    patch_line=$("${grep}" -E "${patch_regex}" "${project_config}")

    if [ -z "${patch_line}" ]
    then
        echo "Failed to find line with package version patch"
        return 1
    fi

    # get current patch version number and increment it
    patch_version="$(echo "${patch_line}" | "${sed}" -r -e "s|${patch_regex}|\2|g")"

    if [ -z "${patch_version}" ]
    then
        echo "Failed to get package version patch number from line ${patch_line}"
        return 1
    fi

    patch_version=$((patch_version+1))

    # replace current with new patch version
    "${sed}" -i -r -e "s|${patch_regex}|\1${patch_version}\3|g" "${project_config}"

    res="$?"

    if [ "${res}" -ne 0 ]
    then
        echo "Failed to replace current with new patch version in line ${patch_line}"
        # TODO: (here and below):
        # https://github.com/koalaman/shellcheck/wiki/SC2152
        return "${res}"
    fi

    # add changes to git repository
    # TODO: error handling ? get log output ?

    # git prints its own error messages
    git add "${project_config}"
    res="$?"; if [ "${res}" -ne 0 ]; then return "${res}"; fi
}


# NOTE: pushd / popd require bash
pushd "${repo_root}" > /dev/null


# -----------------------------------------------------------------------------
# bump patch version

if [ -d "${path_to_multi_proj_root}" ]
then
    echo "Multi-package project: ${repo_root}/${path_to_multi_proj_root}"
    echo

    # TODO: use find to limit list to folders ?
    # TODO: https://github.com/koalaman/shellcheck/wiki/SC2045
    for folder in $(ls "${repo_root}/${path_to_multi_proj_root}")
    do
        project_conf="${repo_root}/${path_to_multi_proj_root}/${folder}/${path_to_proj_conf}"

        echo "Bump patch version in ${project_conf}"
        bump_patch_version "${project_conf}"

        if [ "$?" -ne 0 ]
        then
            echo "Failed to bump patch version in ${project_conf}"
            continue
        fi
    done
else
    echo "Bump patch version in ${path_to_proj_conf}"
    bump_patch_version "${path_to_proj_conf}"

    res="$?"

    if [ "${res}" -ne 0 ]
    then
        echo "Failed to bump patch version in ${path_to_proj_conf}"
        popd > /dev/null
        exit "${res}"
    fi
fi

# TODO: disabled for development; re-activate
# git commit --message "${commit_message}"
# res="$?"; if [ "${res}" -ne 0 ]; then popd > /dev/null; exit "${res}"; fi


popd > /dev/null
