#!/usr/bin/env bash

# dd-start-release
#
# start a software release
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-01


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi

# TODO: prevent processing repo this file is in during development ?
# TODO: verify required executables are available before using them ?
# TODO: script return value when run as Jenkins job ?!?
# TODO: verify release branch to create does not exist on remote yet ?
# TODO: add leading zero to calender week in release name
# TODO: do something with the output when script succeeds, e.g.
# Creating release 2016.21 in <path to project root>:
# Switched to a new branch 'release/2016.21'
#
# Summary of actions:
# - A new branch 'release/2016.21' was created, based on 'develop'
# - You are now on branch 'release/2016.21'
#
# Follow-up actions:
# - Bump the version number now!
# - Start committing last-minute fixes in preparing your release
# - When done, run:
#
#      git flow release finish '2016.21'


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to the root folder of the repository to process
repo_root="$(realpath "$1")"

# name of the release, follows YYYY.CW pattern; as a release is created to
# publish the efforts of the past week, the calender week is that of last week
release_name="$(date +"%Y").$(( $(date +"%V") - 1))"

# one error message that might occur and should be dealt with
err_msg='fatal: Not a gitflow-enabled repo yet. Please run "git flow init" first.'


# NOTE: pushd / popd require bash
pushd "${repo_root}" > /dev/null


# -----------------------------------------------------------------------------
# start the release

echo "Start release ${release_name} in ${repo_root}:"
# this assumes git prints to either stdout or stderr,
# but not both - and sets a corresponding return value
output=$(git flow release start "${release_name}" 2>&1)

res="$?"

if [ "${res}" -ne 0 ]
then
    if [ "${output}" = "${err_msg}" ]
    then
        echo 'Not a gitflow-enabled repo yet; run "git flow init" with defaults:'
        # -d : use default branch names
        git flow init -d
        res="$?"; if [ "${res}" -ne 0 ]; then popd > /dev/null; exit "${res}"; fi
    else
        # git flow release start prints its own error messages
        echo "${output}"
        popd > /dev/null
        exit "${res}"
    fi
fi


popd > /dev/null
