#!/usr/bin/env bash

# dd-create-debian-package
#
# create Debian package
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-01


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    linux*)
        dist_name=$(lsb_release --id --short)

        res="$?"

        if [ "${res}" -eq 0 ]
        then
            # make sure this is run only on Debian / Ubuntu systems
            if [ "${dist_name}" != 'Debian' ] && [ "${dist_name}" != 'Ubuntu' ]
            then
                echo "Unsupported Linux distribution: ${dist_name}"
                exit -1
            fi
        else
            echo "Could not determine Linux distribution name"
            exit "${res}"
        fi

        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi


# TODO: prevent processing repo this file is in during development ?
# TODO: verify required executables are available before using them ?
# TODO: script return value when run as Jenkins job ?!?


# -----------------------------------------------------------------------------
# configure script parameters

# name of this script: http://stackoverflow.com/q/192319
script_name="$(basename "$0")"

# absolute path to the root folder of the repository to process
# on Debian, install realpath using e.g. aptitude install realpath
# on OS X, use grealpath: http://apple.stackexchange.com/a/88812
repo_root="$(realpath "$1")"

# name of the root folder of the repository to process; usually corresponds
# to project name during development, but is arbitrary on CI build slave
root_folder_name="$(basename "${repo_root}")"

# absolute path to target project configuration
project_conf="${repo_root}/project.json"

# get name of target project from configuration
project_name="$(jq -r '.Project' "${project_conf}")"

# package 'base' name is project name in lower case
package_name="$(echo "${project_name}" | tr '[:upper:]' '[:lower:]')"

# path to temporary working folder, relative to target project root
working_folder="../Temp/${root_folder_name}/${script_name}"

# path from working folder back to target project root
path_from_working_folder_to_project_root="../../../${root_folder_name}"


# -----------------------------------------------------------------------------
# create debian package


# change to target project root directory
pushd "${repo_root}" > /dev/null


# remove and (re-) create temporary working folder
if [ -d "${working_folder}" ]
then
    rm -r "${working_folder}"
fi
mkdir -p "${working_folder}"

# change to working folder
pushd "${working_folder}" > /dev/null

# delete files OS X keeps creating so they are not added to the package;
# this occurs with project spaces shared between OSs, e.g. using sshfs
# TODO: lintian reports these, use messages to review / debug this
find . \( -iname '._*' -or -iname '.DS_Store' \) -delete

# TODO: distinguish building code vs. building packages ?

# build the project
# TODO: do this algorithmically (here and below)
# TODO: fix warning in projects other than ChronicServer:
# CMake Warning:
# Manually-specified variables were not used by the project:
#    skip-cfgserver
#    skip-nmeator
cmake -D skip-cfgserver=TRUE -D skip-nmeator=TRUE \
      "${path_from_working_folder_to_project_root}/build"

make -j5

# TODO: distinguish single vs. multi-package projects

if [[ "${project_name}" == 'ChronicServer' ]]
then
    # this works with ChronicServer
    for package_path in $(find "${repo_root}/packages" -maxdepth 1 -mindepth 1 -type d | sort)
    do
        package_name=$(basename "${package_path}")
        if [ "${package_name}" == 'cfgserver' ] || [ "${package_name}" == 'nmeator' ]
        then
            continue
        fi
        echo "${package_name}":
        make "${package_name}-package"
        echo
    done
else
    make "${package_name}-package"
fi

# change back to previous location
popd > /dev/null


# change back to previous location
popd > /dev/null
