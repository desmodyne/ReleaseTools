#!/usr/bin/env bash

# dd-upload-artifacts
#
# upload build artifacts to distribution server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-02


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    linux*)
        dist_name=$(lsb_release --id --short)

        res="$?"

        if [ "${res}" -eq 0 ]
        then
            # make sure this is run only on Debian / Ubuntu systems
            if [ "${dist_name}" != 'Debian' ] && [ "${dist_name}" != 'Ubuntu' ]
            then
                echo "Unsupported Linux distribution: ${dist_name}"
                exit -1
            fi
        else
            echo "Could not determine Linux distribution name"
            exit "${res}"
        fi

        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# ----------------------------------------a-------------------------------------
# process command line arguments

# TODO: support passing distribution channel as second argument ?

# if [ ! -z "$2" ]
# then
#     # TODO: test channel is supported
#     distribution_channel="$1"
#     message="using command line argument, sync'ing to ${distribution_channel} channel at"
# fi

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to the root folder of the repository to process
# on Debian, install realpath using e.g. aptitude install realpath
# on OS X, use grealpath: http://apple.stackexchange.com/a/88812
repo_root="$(realpath "$1")"

# get name of target project from repository root
project_name="$(basename "${repo_root}")"

# package 'base' name is project name in lower case
package_name="$(echo "${project_name}" | tr '[:upper:]' '[:lower:]')"

# absolute path to artifacts folder
artifacts_folder=$(realpath "${repo_root}/../Temp/${project_name}/artifacts")

# these assume packages being uploaded were built on this host
# and there is no "cross-package-building" taking place, ie.
# no creating Debian 32-bit packages on a Ubuntu 64-bit host

# determine Linux distribution (e.g. Debian, Ubuntu)
distribution=$(lsb_release --id --short | tr '[:upper:]' '[:lower:]')

# determine architecture to determine distribution bitness (e.g. i386, amd64)
architecture=$(arch)

if   [[ "${architecture}" == 'i686' ]]
    then distribution_folder='binary-i386'
elif [[ "${architecture}" == 'x86_64' ]]
    then distribution_folder='binary-amd64'
else
    echo "Unsupported architecture ${architecture}"
    exit -1
fi

# archive area: http://askubuntu.com/a/27514
# https://www.debian.org/doc/debian-policy/ch-archive.html
archive_area='non-free'

# determine git branch to determine distribution channel
git_branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)

if [[ "${git_branch}" != 'develop' &&
      "${git_branch}" !=  feature* &&
      "${git_branch}" != 'master'  &&
      "${git_branch}" !=  release* ]]
then
    echo "Unsupported git branch / distribution channel ${git_branch}"
    exit -1
fi

if   [[ "${git_branch}" ==  'develop' ]]
    then distribution_channel='develop'
elif [[ "${git_branch}" ==   feature* ]]
    then distribution_channel='feature'
elif [[ "${git_branch}" ==  'master'  ]]
    then distribution_channel='master'
elif [[ "${git_branch}" ==   release* ]]
    then distribution_channel='release'
fi

# first part of remote server and folder location; defined by us
# NOTE: 'update' server name is defined in DesmoDyne corporate name server
# NOTE: this assumes access to remote server using SSH key is fully set up
remote_loc_base='update:/var/www/desmodyne.com/packages/public_html/protected'

# second part of remote server and folder location; defined by Debian standard
remote_loc_leaf="${distribution}/dists/${distribution_channel}/"
remote_loc_leaf+="${archive_area}/${distribution_folder}"

# complete remote server and folder to upload to
remote_location="${remote_loc_base}/${remote_loc_leaf}"

# rsync switches
rsync_switches='--archive --checksum --verbose'


# -----------------------------------------------------------------------------
# sync local to remote folder

message="repository at ${repo_root} is on git branch ${git_branch}, "
message+="sync'ing local folder ${artifacts_folder} to ${distribution_channel} "
message+="channel at ${remote_location}:"

echo "${message}"

echo "rsync ${rsync_switches} ${artifacts_folder}/ ${remote_location}"
rsync ${rsync_switches} "${artifacts_folder}/" "${remote_location}"
