#!/usr/bin/env bash

# dd-push-finished-release
#
# push a finished release to remote git repo
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-06


echo
echo 'dd-push-finished-release:'
echo

# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

# NOTE: on OS X, install GNU sed and grep using
# brew tap homebrew/dupes; brew install gnu-sed grep
# http://apple.stackexchange.com/a/69332

case "${OSTYPE}" in
    darwin*)
        grep='ggrep'
        sed='gsed'
        ;;
    linux*)
        grep='grep'
        sed='sed'
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi

# TODO: prevent processing repo this file is in during development ?
# TODO: verify required executables are available before using them ?
# TODO: script return value when run as Jenkins job ?!?
# TODO: add leading zero to calender week in release name


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to the root folder of the repository to process
repo_root="$(realpath "$1")"

# release branch prefix; 'release' as per git flow convention
# TODO: remove this with the inactive branch deletion below
# rel_prefix='release'

# develop branch; 'develop' as per git flow convention
develop_branch='develop'

# master branch; 'master' as per git flow convention
master_branch='master'

# regex pattern for most recent commit message
message_regex="^Merge tag '(.*)' into develop"


# NOTE: pushd / popd require bash
pushd "${repo_root}" > /dev/null


# -----------------------------------------------------------------------------
# push the finished release

# NOTE: this script expects to be called in the following context:
# dd-publish has finished the release, i.e. merged the release branch to master
# and to develop, deleted the local release branch and created a release tag;
# the tag and the changes merged to develop and master must be pushed to origin,
# the release branch must be deleted at origin

# TODO: make origin configurable ? detect default remote ?
# TODO: test if tag exists locally and only push if it does ?
# TODO: deal with improperly set up remotes not using 'origin':
# git flow heavily relies on that convention:
#   fatal: No configured push destination.
#   Either specify the URL from the command-line or configure a remote repository using
#       git remote add <name> <url>
#   and then push using the remote name
#       git push <name>

# name of the release in progress: at this point, the release branch has already
# been deleted and the best way to determine the name of the release whose
# changes to push seems to be to look at the most recent git commit message

# http://stackoverflow.com/a/7293026
# git log -1 --pretty=%B sample output:
# Merge tag '2016.23.02' into develop
#
# automatically_created_release_tag 2016.23.02
#

release_name="$(git log -1 --pretty=%B            \
                    | "${grep}" -E "${message_regex}" \
                    | "${sed}" -r -e "s|${message_regex}|\1|g")"

if [ -z "${release_name}" ]
then
    echo "Failed to determine name of current release"
    exit -1
fi

# NOTE: tag name is equal to release name by git flow convention
echo "Push release tag ${release_name} to origin:"
git push origin "${release_name}"

res="$?"

if [ "${res}" -ne 0 ]
then
    # git push prints its own error messages
    popd > /dev/null
    exit "${res}"
fi

# TODO: git pull to deal with push rejections due to upstream changes:
# To <git repo url>
#    ! [rejected]        develop -> develop (non-fast-forward)
#   error: failed to push some refs to '<git repo url>'
#   hint: Updates were rejected because the tip of your current branch is behind
#   hint: its remote counterpart. Integrate the remote changes (e.g.
#   hint: 'git pull ...') before pushing again.
#   hint: See the 'Note about fast-forwards' in 'git push --help' for details.

echo "Push changes merged to ${develop_branch} to origin:"
git push origin "${develop_branch}"

res="$?"

if [ "${res}" -ne 0 ]
then
    # git push prints its own error messages
    popd > /dev/null
    exit "${res}"
fi

echo "Push changes merged to ${master_branch} to origin:"
git push origin "${master_branch}"

res="$?"

if [ "${res}" -ne 0 ]
then
    # git push prints its own error messages
    popd > /dev/null
    exit "${res}"
fi

# TODO: as of git flow 1.8.0-1 Debian package on Debian 8.4 64-bit,
# this seems no longer required, the remote release branch is already
# deleted by git flow release finish --> delete only if exists (?)
#
# echo "Delete release branch ${rel_prefix}/${release_name} on origin:"
# git push origin --delete "${rel_prefix}/${release_name}"
#
# res="$?"
#
# if [ "${res}" -ne 0 ]
# then
#     # git push prints its own error messages
#     popd > /dev/null
#     exit "${res}"
# fi


popd > /dev/null


echo
echo 'dd-push-finished-release: success'
echo
