#!/usr/bin/env bash

# dd-create-brew-package
#
# create brew package
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-07-08


echo
echo 'dd-create-brew-package:'
echo

# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

# NOTE: technically, brew packages can be built on Linux as much as on OS X;
# restricting execution platforms to OS X here keeps things a lot simpler:
# if this runs on OS X only, we will not encounter both brew and Debian packages

case "${OSTYPE}" in
    darwin*)
        grep='ggrep'
        sed='gsed'
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi


# TODO: error handling
# TODO: prevent processing repo this file is in during development ?
# TODO: verify required executables are available before using them ?
# TODO: script return value when run as Jenkins job ?!?


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
path_to_project_root='../../../..'

# absolute path to the root folder of the repository to process
# on Debian, install realpath using e.g. aptitude install realpath
# on OS X, use grealpath: http://apple.stackexchange.com/a/88812
repo_root="$(realpath "$1")"

# absolute path to target project configuration
project_conf="${repo_root}/project.json"

# name of target project
project_name="$(jq -r '.Project' "${project_conf}")"

# package output folder, relative to target project root
package_folder="$(jq -r '.Artifacts.packages' "${project_conf}")"

# for single-package projects, package name is project name in lower case;
# for multi-package projects, package names are determined further below
package_name="$(echo "${project_name}" | tr '[:upper:]' '[:lower:]')"

# major minor patch project / package version
major_version="$(jq -r '.Version.major' "${project_conf}")"
minor_version="$(jq -r '.Version.minor' "${project_conf}")"
patch_version="$(jq -r '.Version.patch' "${project_conf}")"

# git archive format; see git archive --list for supported formats
archive_format='tar.gz'

# brew package version
version="${major_version}.${minor_version}.${patch_version}"

# archive file name
archive_name="${package_name}.${version}.${archive_format}"

# git branch of target project
git_branch=$(git -C "${repo_root}" rev-parse --symbolic-full-name --abbrev-ref HEAD)

if [[ "${git_branch}" != 'develop' && \
      "${git_branch}" !=  feature* && \
      "${git_branch}" != 'master'  && \
      "${git_branch}" !=  release* ]]
then
    echo "Unsupported git branch / distribution channel ${git_branch}"
    exit -1
fi

if   [[ "${git_branch}" ==  'develop' ]]
then
    # shellcheck disable=SC2034
    distribution_channel='develop'
elif [[ "${git_branch}" ==   feature* ]]
then
    # shellcheck disable=SC2034
    distribution_channel='feature'
elif [[ "${git_branch}" ==  'master'  ]]
then
    # shellcheck disable=SC2034
    distribution_channel='master'
elif [[ "${git_branch}" ==   release* ]]
then
    # shellcheck disable=SC2034
    distribution_channel='release'
fi

# credentials used to access protected section of update server
# TODO: get these from elsewhere or better, use SSH key instead
username='flw'
password='Ei4!hcxL'

# packages / update server hostname
hostname='packages.desmodyne.com'

# path on server to brew packages folder
server_path="protected/osx/dists/${distribution_channel}"

# full brew package download url
url="http://${username}:${password}@${hostname}/${server_path}/${archive_name}"

# path to brew formula project base, relative to root folder of this project;
# this is the folder into which all formula git repos are cloned to locally
path_to_formula_project_base='../../DesmoDyne'

# TODO: clone git repo if it does not exist locally yet

# map project name as defined in project.json to
#  1. brew formula git repo root, relative to formula project base
#  2. path to brew formula template, relative to brew formula git repo base
#  3. path to brew formula, relative to brew formula git repo base
declare -A formula_info_map

# shellcheck disable=SC2154
formula_info_map["niceTools"]='homebrew-tools:data/tmpl/nicetools.rb.j2:Formula/nicetools.rb'
# shellcheck disable=SC2154
formula_info_map["ReleaseTools"]='homebrew-tools:data/tmpl/releasetools.rb.j2:Formula/releasetools.rb'

# template json data string template
read -r -d '' tmpl_data_tmpl <<'EOT'
{
    "sha256"  : "%s",
    "url"     : "%s",
    "version" : "%s"
}
EOT

# absolute path to Python virtual environment activation script
path_to_virt_env_script="${HOME}/.virtualenvs/dd/bin/activate"


# -----------------------------------------------------------------------------
# create brew package


# change to target project root directory
pushd "${repo_root}" > /dev/null


# delete files OS X keeps creating so they are not added to the package;
# this occurs with project spaces shared between OSs, e.g. using sshfs
# TODO: is this really required ? git archive knows its files...
find . \( -iname '._*' -or -iname '.DS_Store' \) -delete

# remove and (re-) create temporary working folder
if [ -d "${package_folder}" ]
then
    rm -r "${package_folder}"
fi
mkdir -p "${package_folder}"

echo "Create archive ${repo_root}/${package_folder}/${archive_name}"
git archive --format="${archive_format}"              \
            --output="${package_folder}/${archive_name}"  \
            "${git_branch}"
res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi

# calculate SHA256 checksum, required for brew formula
sha256="$(shasum -a 256 "${package_folder}/${archive_name}" | cut -d ' ' -f 1)"


# change back to previous location
popd > /dev/null


# -----------------------------------------------------------------------------
# update brew package formula


# change to formula repo root folder
formula_repo="${path_to_this_script}/${path_to_project_root}/"
formula_repo+="${path_to_formula_project_base}/"
formula_repo+="$(echo "${formula_info_map[${project_name}]}" | cut -d : -f 1)"
pushd "${formula_repo}" > /dev/null

# shellcheck disable=SC2059
tmpl_data="$(printf "${tmpl_data_tmpl}" "${sha256}" "${url}" "${version}")"

formula_path="$(echo "${formula_info_map[${project_name}]}" | cut -d : -f 3)"
formula_tmpl="$(echo "${formula_info_map[${project_name}]}" | cut -d : -f 2)"

# switch to virtual Python environment; required to use j2
# https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck source=${HOME}/.virtualenvs/dd/bin/activate
source "${path_to_virt_env_script}"

echo "Create formula $(realpath "${formula_repo}")/${formula_path}"
echo "${tmpl_data}" | j2 --format=json "${formula_tmpl}" > "${formula_path}"

# leave virtual Python environment
deactivate


# change back to previous location
popd > /dev/null


echo
echo "dd-create-brew-package: success"
echo
