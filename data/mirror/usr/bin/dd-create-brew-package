#!/usr/bin/env bash

# dd-create-brew-package
#
# create brew package
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-07-08


echo
echo 'dd-create-brew-package:'
echo

# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

# NOTE: technically, brew packages can be built on Linux as much as on OS X;
# restricting execution platforms to OS X here keeps things a lot simpler:
# if this runs on OS X only, we will not encounter both brew and Debian packages

case "${OSTYPE}" in
    darwin*)
        # http://stackoverflow.com/a/12405621
        :
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi


# TODO: error handling; access project config file only once
# TODO: prevent processing repo this file is in during development ?
# TODO: verify required executables are available before using them ?
# TODO: script return value when run as Jenkins job ?!?
# TODO: check target project git repo status and flag output if unclean


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to the root folder of the repository to process
# on Debian, install realpath using e.g. aptitude install realpath
# on OS X, use grealpath: http://apple.stackexchange.com/a/88812
repo_root="$(realpath "$1")"

# absolute path to target project configuration
project_conf="${repo_root}/project.conf"

if [ ! -e "${project_conf}" ]
then
    echo "Failed to find project configuration ${project_conf}"
    exit 1
fi

# name of target project
project_name="$(jq -r '.Project' "${project_conf}")"

# package output folder, relative to target project root
package_folder="$(jq -r '.Artifacts.packages' "${project_conf}")"

# major minor patch project / package version
major_version="$(jq -r '.Version.major' "${project_conf}")"
minor_version="$(jq -r '.Version.minor' "${project_conf}")"
patch_version="$(jq -r '.Version.patch' "${project_conf}")"

# git archive format; see git archive --list for supported formats
archive_format='tar.gz'

# brew package version
version="${major_version}.${minor_version}.${patch_version}"

# archive file name
#
# TODO: git archives downloaded from gitlab.com follow a different path
# and file naming convention than archives used by public brew packages:
#
# gitlab.com archives, e.g.
#   https://gitlab.com/DesmoDyne/Tools/ ...
#    ... ReleaseTools/repository/0.2.0/archive.tar.gz
# have the project name, tag (?) and commit hash prepended as root folder, e.g.
#   ReleaseTools-0.2.0-81322dd3abf277ec69cfac481beeb0b0d81306c1
#
# brew package archives, e.g.
#   /Users/ansible/Library/Caches/Homebrew/ ...
#    ... sqlite-3.20.1.el_capitan.bottle.tar.gz
# have package name and version prepended as root folders, e.g. sqlite/3.20.1/
#
# brew renames a downloaded gitlab.com archive including any suffixes, e.g.
#   https://gitlab.com/DesmoDyne/Tools/ ...
#    ... ReleaseTools/repository/archive.tar.gz?ref=0.2.1&private_token=<snip>
# to match its own convention, e.g.
#   /Users/ansible/Library/Caches/Homebrew/ ...
#    ... release-tools-0.2.1.1&private_token=<snip>
#
# in order for the archive sha256 checksum rendered into the brew package
# formula by dd-create-brew-package-formula to be correct, the gitlab.com
# archive root folder must be reproduced when creating a local package
#
# TODO: the archive checksum is not identical to that for gitlab archive !!
# TODO: private gitlab.com token is exposed as part of the archive filename
# TODO: this must be in sync with dd-create-brew-package
# (and possibly others) --> get this from elsewhere (?)
#
archive_name="archive.${archive_format}"

# git branch of target project
git_branch="$(git -C "${repo_root}" rev-parse --symbolic-full-name \
                                              --abbrev-ref HEAD)"
# git SHA-1 sum of current commit
git_commit="$(git -C "${repo_root}" rev-parse --verify HEAD)"


# -----------------------------------------------------------------------------
# create brew package


# change to target project root directory
pushd "${repo_root}" > /dev/null


# delete files OS X keeps creating so they are not added to the package;
# this occurs with project spaces shared between OSs, e.g. using sshfs
# TODO: is this really required ? git archive knows its files...
find . \( -iname '._*' -or -iname '.DS_Store' \) -delete

# remove and (re-) create temporary working folder
if [ -d "${package_folder}" ]
then
    rm -r "${package_folder}"
fi
mkdir -p "${package_folder}"


prefix="${project_name}-${version}-${git_commit}"

echo "Create archive ${repo_root}/${package_folder}/${archive_name}"
# https://git-scm.com/docs/git-archive
git archive --format="${archive_format}"                  \
            --output="${package_folder}/${archive_name}"  \
            --prefix="${prefix}/"                         \
            "${git_branch}"
res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi


# change back to previous location
popd > /dev/null


echo
echo "dd-create-brew-package: success"
echo
