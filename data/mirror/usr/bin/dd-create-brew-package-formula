#!/usr/bin/env bash

# dd-create-brew-package-formula
#
# create brew package formula
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-07-10


echo
echo 'dd-create-brew-package-formula:'
echo

# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

# NOTE: technically, brew packages can be built on Linux as much as on OS X;
# restricting execution platforms to OS X here keeps things a lot simpler:
# if this runs on OS X only, we will not encounter both brew and Debian packages

case "${OSTYPE}" in
    darwin*)
        # http://stackoverflow.com/a/12405621
        :
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi


# TODO: error handling; access project config file only once
# TODO: error handling; remove duplicate code and pushd / popd mess
# TODO: prevent processing repo this file is in during development ?
# TODO: verify required executables are available before using them ?
# TODO: script return value when run as Jenkins job ?!?
# TODO: major conf effort to get archive name; any better way ?


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to the root folder of the repository to process
# on Debian, install realpath using e.g. aptitude install realpath
# on OS X, use grealpath: http://apple.stackexchange.com/a/88812
# TODO: validate repo_root before using it
repo_root="$(realpath "$1")"

# absolute path to target project configuration
project_conf="${repo_root}/project.conf"

if [ ! -e "${project_conf}" ]
then
    echo "Failed to find project configuration ${project_conf}"
    exit 1
fi

# name of target project
project_name="$(jq -r '.Project' "${project_conf}")"

# mirror folder with scripts to install, relative to target project root
mirror_folder="$(jq -r '.Paths.mirror_folder' "${project_conf}")"

# package output folder, relative to target project root
package_folder="$(jq -r '.Artifacts.packages' "${project_conf}")"

# TODO: does this download URL support auth alternatives ?
# https://gitlab.com/api/v3/projects/2113101/repository/ ...
#  ... archive.tar.gz\?private_token\=<snipped>
# brew install does not support adding http headers,
# so private token must be encoded into download url
# http://stackoverflow.com/a/28361068
# TODO: the url is visible in eg. ps output, so this represents a security risk

# TODO: is there any way to use this url scheme with a private repo ?
# https://gitlab.com/gitlab-org/gitlab-ce/issues/19843
# https://gitlab.com/DesmoDyne/ReleaseTools/repository/archive.tar.gz?ref=0.2.0

# package name is project name in lower case and camel case
# amended by dashes, e.g. ReleaseTools --> release-tools:
# https://github.com/Homebrew/brew/blob/master/ ...
#  ... docs/Formula-Cookbook.md#a-quick-word-on-naming
# NOTE: this is different from the archive filename
# https://stackoverflow.com/a/10218742
# https://stackoverflow.com/a/10757348
package_name="$( echo "${project_name::1}" | tr '[:upper:]' '[:lower:]')"
package_name+="$(echo "${project_name:1}"  | sed -e 's|\([A-Z]\)|-\1|g' \
                                           | tr '[:upper:]' '[:lower:]')"

# major minor patch project / package version
major_version="$(jq -r '.Version.major' "${project_conf}")"
minor_version="$(jq -r '.Version.minor' "${project_conf}")"
patch_version="$(jq -r '.Version.patch' "${project_conf}")"

# git archive format; see git archive --list for supported formats
archive_format='tar.gz'

# brew package version
version="${major_version}.${minor_version}.${patch_version}"

# archive file name
# see also dd-create-brew-package, search for 'archive file name'
archive_name="archive.${archive_format}"

# path to brew package file, relative to target project root
package_path="${package_folder}/${archive_name}"

# brew formula template folder, relative to target project root
formula_tmpl_folder='data/tmpl'

# brew formula template file name
formula_tmpl_name="${package_name}.rb.j2"

# brew formula folder, relative to target project root
formula_folder='tmp/formula'

# brew formula file name
formula_name="${package_name}.rb"

# packages / update server hostname
hostname='gitlab.com'

# path on server to brew packages folder
server_path="DesmoDyne/Tools/${project_name}/repository"

# TODO: align these:

# FAIL: once the formula is used to install, the GITLAB_HOMEBREW_TOKEN env var
# is not picked up; code itself is good, but the resulting string is empty;
# downloading archives generated automatically for every release by gitlab
# will anyway fail once software packages installed using brew contain binary
# components (e.g. applications) that must be built prior to distribution

# full brew package download url as used in formula
# TODO: protocol - http / https / other
# TODO: username / password ? SSH key ? other ?
# TODO: use ~/.secrets/git-credentials instead of GITLAB_HOMEBREW_TOKEN
formula_url="https://${hostname}/${server_path}/${archive_name}"
formula_url+="?ref=${version}&private_token=#{ENV['GITLAB_HOMEBREW_TOKEN']}"

# template for full brew package download url
archive_url_tmpl="https://${hostname}/${server_path}/${archive_name}"
archive_url_tmpl+="?ref=${version}&private_token=%s"

# template json data string template
read -r -d '' tmpl_data_tmpl <<'EOT'
{
    "install" : [ %s ],
    "sha256"  : "%s",
    "url"     : "%s",
    "version" : "%s"
}
EOT


# -----------------------------------------------------------------------------
# get git credentials store file

# NOTE: private_token used to be taken from GITLAB_HOMEBREW_TOKEN env var:
#   https://wheniwork.engineering/ ...
#    ... creating-a-private-homebrew-tap-with-gitlab-8800c453d893
# but that is a proprietary solution used by the author of the page above;
# it exposes sensitive information in an env var which is not acceptable
#
# the approach for storing credentials used by git itself is configured in
# ~/.gitconfig and can be as simple as a a file ~/.secrets/git-credentials:
#   alexa:~ ssc$ grep -A1 '\[credential\]' ~/.gitconfig
#   [credential]
#           helper = store --file=${HOME}/.secrets/git-credentials
#   alexa:~ ssc$ cat ${HOME}/.secrets/git-credentials | hide-secrets
#   https://dd-ssc:<access token #01>@gitlab.com
#   https://ssc.egston:<access token #02>@gitlab.com
#   https://z00m1n:<access token #03>@github.com
#
# in addition, git-credentials supports getting secrets from macOS Keychain:
# https://help.github.com/articles/caching-your-github-password-in-git
# https://help.github.com/articles/updating-credentials-from-the-osx-keychain/

# TODO: review existing github / gitlab creds in ~/.secrets, Keychain, etc.
# TODO: use git ssh:// url and use ssh keys for auth & auth ?
#       https://help.github.com/articles/connecting-to-github-with-ssh/
# TODO: git credential does not seem to support getting password as clear text,
#       so parsing a store file - while not in line with the remaining
#       git approach - might work, but using e.g. macOS Keychain will not:
#       https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage
# TODO: I think I might get carried away a little with error handling here...

# sample output:
#   alexa:~ ssc$ git config --global --get credential.helper
#   store --file=${HOME}/.secrets/git-credentials
#   alexa:~ ssc$ git config --system --get credential.helper
#   osxkeychain

# NOTE: see https://stackoverflow.com/q/16052602 on git config in general:
#   alexa:~ ssc$ git config --global --show-origin --get credential.helper
#   file:${HOME}/.gitconfig	store --file=${HOME}/.secrets/git-credentials
#   alexa:~ ssc$ git config --system --show-origin --get credential.helper
#   file:/usr/local/etc/gitconfig	osxkeychain
# TODO: git -C "${repo_root}" config --local --get credential.helper ?

# NOTE: this seems to correspond to
#   git config --get --global credential.helper
if output="$(git config credential.helper)"
then
    git_cred_conf="${output}"
else
    echo "Failed to get git credentials helper configuration:"
    echo "${output}"
    exit 1
fi

if [ -z "${git_cred_conf}" ]
then
    echo "git credentials helper is not configured"
    exit 1
fi

# NOTE: bash parameter expansion / substring removal:
# http://wiki.bash-hackers.org/syntax/pe#substring_removal

# https://stackoverflow.com/a/26910614
cred_helper="${git_cred_conf%% *}"

if [ "${cred_helper}" != 'store' ]
then
    echo "Unsupported git credentials helper ${cred_helper}"
    exit 1
fi

# https://unix.stackexchange.com/a/174039
store_conf="${git_cred_conf##* }"

# https://stackoverflow.com/a/2172367
if [[ "${store_conf}" != '--file='* ]]
then
    echo "Unsupported git credentials store configuration ${store_conf}"
    exit 1
fi

creds_file="${store_conf##*=}"

if [ ! -e "${creds_file}" ]
then
    echo "git credentials store file does not exist:\\n    ${creds_file}"
    exit 1
fi

if [ ! -f "${creds_file}" ]
then
    echo "git credentials store file is not a file:\\n    ${creds_file}"
    exit 1
fi

if [ ! -r "${creds_file}" ]
then
    echo "Can not read git credentials store file:\\n    ${creds_file}"
    exit 1
fi


# -----------------------------------------------------------------------------
# get username and hostname from origin remote url of repo being processed

if output="$(git -C "${repo_root}" config remote.origin.url)"
then
    remote_url="${output}"
else
    echo "Failed to get git repository remote URL:"
    echo "${output}"
    exit 1
fi

if [ -z "${remote_url}" ]
then
    echo "git repository remote URL is not configured"
    exit 1
fi

protocol="${remote_url%%:\/\/*}"

if [ "${protocol}" != 'https' ]
then
    echo "Unsupported git protocol ${protocol}"
    exit 1
fi

username="${remote_url##*:\/\/}"
username="${username%%@*}"

if [ -z "${username}" ]
then
    msg='Failed to get username from git repository'
    msg+=" remote URL:\\n    ${remote_url}"
    echo "${msg}"
    exit 1
fi


hostname="${remote_url##*@}"
hostname="${hostname%%/*}"

if [ -z "${hostname}" ]
then
    msg='Failed to get hostname from git repository'
    msg+=" remote URL:\\n    ${remote_url}"
    echo "${msg}"
    exit 1
fi


# -----------------------------------------------------------------------------
# get password from git configuration for username and hostname

# TODO: configure stuff (or parts thereof) as script parameters

# regular expression to match line in git creds store file
regex="^${protocol}://${username}:\(.*\)@${hostname}$"

# sed expression to extract password from matching line
sed_expr="s|${regex}|\1|g"


matching_lines="$(grep "${regex}" "${creds_file}")"
num_of_lines="$(wc -l <<< "${matching_lines}" | xargs)"

if   [ "${num_of_lines}" -eq 0 ]
then
    echo 'Failed to find a matching line in git credentials store'
    exit 1
elif [ "${num_of_lines}" -gt 1 ]
then
    echo 'Found more than one matching line in git credentials store'
    exit 1
fi

access_token="$(gsed -e "${sed_expr}" <<< "${matching_lines}")"

if [ -z "${access_token}" ]
then
    echo 'Failed to get access token from git credentials store'
    exit 1
fi

# full brew package download url as used to download archive
archive_url="$(printf "${archive_url_tmpl}" "${access_token}")"


# -----------------------------------------------------------------------------
# create brew package formula


# change to target project root directory
pushd "${repo_root}" > /dev/null


# NOTE: the brew package formula is created here by rendering a template
# provided by the target project; staging it in the brew formula git repo and
# committing and pushing the change is considered equivalent to updating a
# Debian package server index and is done in dd-update-formula-repo

# remove and (re-) create formula folder
if [ -d "${formula_folder}" ]
then
    rm -r "${formula_folder}"
fi
mkdir -p "${formula_folder}"

# remove and (re-) create package folder
if [ -d "${package_folder}" ]
then
    rm -r "${package_folder}"
fi
mkdir -p "${package_folder}"


# generate install section string
install=''

# TODO: this probably fails with whitespace in mirror_folder
for filename in ${mirror_folder}/*
do
    # shellcheck disable=SC2059
    # TODO: printf strips trailing whitespace :-(
    install+="\"${filename}\","$'\n'
done

# remove comma in last line
# https://stackoverflow.com/a/12390197
# -n switch to echo is essential for this to work
install="$(echo -n "${install}" | sed '$s/,$//')"

# TODO: archive_url contains access_token, so this is a security risk

# download archive to calculate checksum
if ! output="$(curl --output "${package_path}"  \
                    --silent                    \
                    --show-error                \
                    "${archive_url}")"
then
    echo 'Failed to download brew package from'
    echo "  ${archive_url}:"
    echo "${output}"
    exit 1
fi

# shasum doesn't print usable error messages
if [ ! -e "${package_path}" ]
then
    # from 'man realpath':
    #   -m, --canonicalize-missing
    #          no path components need exist or be a directory
    echo "Failed to find brew package $(realpath -m "${package_path}")"
    exit 1
fi

# calculate SHA256 checksum, required for brew formula
if ! output="$(shasum -a 256 "${package_path}")"
then
    echo 'Failed to calculate SHA256 checksum for brew package:'
    echo "${output}"
    popd > /dev/null
    exit 1
fi

sha256="$(echo "${output}" | cut -d ' ' -f 1)"

# shellcheck disable=SC2059
tmpl_data="$(printf "${tmpl_data_tmpl}" \
                    "${install}" "${sha256}" "${formula_url}" "${version}")"

formula_path="${formula_folder}/${formula_name}"
formula_tmpl="${formula_tmpl_folder}/${formula_tmpl_name}"

if [ ! -e "${formula_tmpl}" ]
then
    echo "Failed to find brew formula template $(realpath -m "${formula_tmpl}")"
    exit 1
fi

# TODO: find a way to auto-install j2 Python pip package
echo "Create formula $(realpath "${repo_root}/${formula_path}")"
if ! output="$(echo "${tmpl_data}"                        \
                | j2 --format=json "${formula_tmpl}" 2>&1 \
                > "${formula_path}")"
then
    echo 'Failed to render brew formula template:'
    echo "${output}"
    popd > /dev/null
    exit 1
fi


# change back to previous location
popd > /dev/null


echo
echo "dd-create-brew-package-formula: success"
echo
