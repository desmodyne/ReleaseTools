#!/usr/bin/env bash

# dd-bump-patch-version
#
# increase version number patch level by 1
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-03


# MAJOR.MINOR.PATCH versioning: http://semver.org
# https://en.wikipedia.org/wiki/Software_versioning


echo
echo 'dd-bump-patch-version:'
echo

# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

# NOTE: on OS X, install GNU sed and grep using
# brew tap homebrew/dupes; brew install gnu-sed grep
# http://apple.stackexchange.com/a/69332

case "${OSTYPE}" in
    darwin*)
        grep='ggrep'
        sed='gsed'
        ;;
    linux*)
        grep='grep'
        sed='sed'
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi

# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to root folder of repository to process
repo_root="$(realpath "$1")"

# path to project configuration file, relative to root of target project
path_to_proj_conf='project.json'

# regular expression pattern template for multiple lines defining patch version
multi_line_patch_regex_tmpl='("%s"[^p]*"patch" : ")([0-9]+)(")'

# regular expression pattern for line defining patch version
patch_regex='(    "patch" : ")([0-9]+)(")'

# message for committing changes to project configuration file
# TODO: add project and release names ?
commit_message='[#1]: bump patch version'


# -----------------------------------------------------------------------------
# declare functions

function bump_patch_version
{
    project_config="$1"

    # verify project configuration exists before accessing it
    if [ ! -f "${project_config}" ]
    then
        echo "Failed to find project configuration file: ${project_config}"
        return 1
    fi

    # TODO: verify this works with relative paths passed as cmd line argument
    # TODO: prevent processing conf of this project during development ?
    # TODO: verify required executables are available before using them ?
    # TODO: script return value when run as Jenkins job ?!?
    # TODO: refactor this to remove code duplication

    if [ "$(jq '.Version.major' "${project_config}")" = 'null' ] &&
       [ "$(jq '.Version.minor' "${project_config}")" = 'null' ] &&
       [ "$(jq '.Version.patch' "${project_config}")" = 'null' ]
    then

        # multi-package project

        # TODO: plausibility check against .../packages/* ?
        # TODO: package names in project.json use _, folder names use -
        package_names="$(jq -r '.Version | keys []' "${project_config}")"

        for package_name in ${package_names}
        do
            # get current patch version number and increment it
            patch_version="$(jq -r ".Version.${package_name}.patch" "${project_config}")"

            res="$?"

            # TODO: if [ -z "${patch_version}" ] ?

            if [ "${res}" -ne 0 ]
            then
                message="Failed to get package version patch number from "
                message+="project configuration file ${project_config}"
                echo "${message}"
                return "${res}"
            fi

            patch_version=$((patch_version + 1))

            # replace current with new patch version
            patch_regex="$(printf "${multi_line_patch_regex_tmpl}" "${package_name}")"
            echo "patch_regex: ${patch_regex}"

            # http://unix.stackexchange.com/a/152389 <--- !!!
            # NOTE: it doesn't seem possible to modify the JSON file
            # in place; see also http://stackoverflow.com/a/24943373
            json_data="$(cat "${project_config}" \
              | tr '\n' '\r'                     \
              | "${sed}" -r -e "s|${patch_regex}|\1${patch_version}\3|g" \
              | tr '\r' '\n')"
            echo "${json_data}" > "${project_config}"
        done

    else

        # single-package project

        # get current patch version number and increment it
        patch_version="$(jq -r '.Version.patch' "${project_config}")"

        res="$?"

        # TODO: if [ -z "${patch_version}" ] ?

        if [ "${res}" -ne 0 ]
        then
            message="Failed to get package version patch number from "
            message+="project configuration file ${project_config}"
            echo "${message}"
            return "${res}"
        fi

        patch_version=$((patch_version + 1))

        # replace current with new patch version
        # TODO: using jq would be a lot simpler, but jq chooses to re-format file
        # in an arbitrary style and there seems to be now way to configure that :-(
        # json_data="$(jq ".Version.patch = \"${patch_version}\"" "${project_config}")"
        # echo "${json_data}" > "${project_config}"
        "${sed}" -i -r -e "s|${patch_regex}|\1${patch_version}\3|g" "${project_config}"

        res="$?"

        if [ "${res}" -ne 0 ]
        then
            message="Failed to replace current with new patch version in "
            message+="project configuration file ${project_config}"
            # TODO: (here and below):
            # https://github.com/koalaman/shellcheck/wiki/SC2152
            return "${res}"
        fi

        # add changes to git repository
        # TODO: error handling ? get log output ?

        # git prints its own error messages
        git add "${project_config}"
        res="$?"; if [ "${res}" -ne 0 ]; then return "${res}"; fi

    fi
}


# NOTE: pushd / popd require bash
pushd "${repo_root}" > /dev/null


# -----------------------------------------------------------------------------
# bump patch version

project_conf="${repo_root}/${path_to_proj_conf}"

echo "Bump patch version in ${project_conf}"
bump_patch_version "${project_conf}"

res="$?"

if [ "${res}" -ne 0 ]
then
    popd > /dev/null
    exit "${res}"
fi

if [ "${error_flag}" = false ]
then
    git commit --message "${commit_message}"
    res="$?"; if [ "${res}" -ne 0 ]; then popd > /dev/null; exit "${res}"; fi
fi


popd > /dev/null


echo
echo 'dd-bump-patch-version: success'
echo
