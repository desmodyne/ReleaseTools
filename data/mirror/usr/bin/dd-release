#!/usr/bin/env bash

# dd-release
#
# perform a complete software release
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-04


# -----------------------------------------------------------------------------
# define functions

# http://stackoverflow.com/a/6212408

function usage
{

    # TODO: do not use global variables
    # TODO: space between << and 'EOT' makes a
    # difference for atom syntax highlighting
    # TODO: align properly and remove leading space when printing ?

    read -r -d '' msg_tmpl <<'EOT'
Usage: %s folder [version]

mandatory arguments:
  folder                project repository root folder

optional arguments:
  semver                semantic project version to release
  -?, --help            print this help message
EOT

    # shellcheck disable=SC2059
    printf "${msg_tmpl}\n" "${script_name}"
}


# -----------------------------------------------------------------------------
# process command line arguments

# name of this script: http://stackoverflow.com/q/192319
script_name="$(basename "$0")"

# http://stackoverflow.com/a/14203146
while [ $# -gt 0 ]
do
    key="$1"

    case "${key}" in
      # NOTE: must escape -?, seems to act as wildcard otherwise
      -\?|--help) usage; exit 1 ;;

      *)  if [ -z "${folder}" ]
          then
              folder="$1"
          else
              if [ -z "${semver}" ]
              then
                  semver="$1"
              else
                  usage
                  exit 1
              fi
          fi
    esac

    # move past argument or value
    shift
done


# folder is a mandatory command line argument
if [ -z "${folder}" ]
then
    usage
    exit 1
fi


# -----------------------------------------------------------------------------
# configure script parameters

# TODO: review regular expression globally:
# e.g. \d is a Perlism
# e.g. [0-9] fails for locales other than C (or Western European)
# e.g. [[:digit:]] works for all theses cases
# http://stackoverflow.com/a/26091443

# regular expression that matches a semantic version:
# MAJOR.MINOR.PATCH versioning: http://semver.org
# https://en.wikipedia.org/wiki/Software_versioning

# TODO: semver also allows e.g. 1, 2.0, 3.0.* and others
semver_regex='^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$'


# -----------------------------------------------------------------------------
# validate command line arguments

if [ ! -e "${folder}" ]
then
    echo "${folder}: No such file or directory"
    exit 1
fi

if [ ! -d "${folder}" ]
then
    echo "${folder}: Not a directory"
    exit 1
fi

if [ -n "${semver}" ]
then

    if [[ ! "${semver}" =~ ${semver_regex} ]]
    then
        echo "${semver}: Invalid semantic version"
        exit 1
    fi
fi


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# absolute path to the root folder of the repository to process
repo_root="$(realpath "${folder}")"

# list of tools called by this script
req_tools='dd-verify-user-configuration dd-start-release '
req_tools+='dd-update-project-version dd-create-release-notes '
req_tools+='dd-push-release-branch'

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"


# -----------------------------------------------------------------------------
# determine path to other ReleaseTools scripts

# In production, all ReleaseTools scripts are installed  using a distribution
# package and any (ReleaseTools or other, e.g. Linux system) tools are found
# in PATH; during development, this is not necessarily the case: Test if all
# tools are found and if one is missing, append the path this script resides in
# to PATH and retry. This does not mix package / production and development
# versions, either all ReleaseTools scripts are taken from PATH or from local.

amended_path=false

for req_tool in ${req_tools}
do
    if [ -z "$(which "${req_tool}")" ]
    then
        echo "${req_tool}: No such file or directory; amending PATH and retry"
        PATH="${path_to_this_script}:${PATH}"
        amended_path=true
    fi
done

if [ "${amended_path}" = true ]
then
    for req_tool in ${req_tools}
    do
        if [ -z "$(which "${req_tool}")" ]
        then
            echo "${req_tool}: No such file or directory"
            exit -1
        fi
    done
fi


# -----------------------------------------------------------------------------
# call the other scripts in the designated order

# TODO: review error handling (use trap with error function ?)

dd-verify-user-configuration "${repo_root}"
res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi

dd-start-release "${repo_root}" "${semver}"
res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi

dd-update-project-version "${repo_root}" "${semver}"
res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi

dd-create-release-notes "${repo_root}"
res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi

dd-push-release-branch "${repo_root}"
res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi
