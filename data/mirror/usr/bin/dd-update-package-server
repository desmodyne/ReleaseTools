#!/usr/bin/env bash

# dd-update-package-server
#
# update package meta-data on distribution server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-11


echo
echo 'dd-update-package-server:'
echo

# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    linux*)
        dist_name=$(lsb_release --id --short)

        res="$?"

        if [ "${res}" -eq 0 ]
        then
            # make sure this is run only on Debian / Ubuntu systems
            if [ "${dist_name}" != 'Debian' ] && [ "${dist_name}" != 'Ubuntu' ]
            then
                echo "Unsupported Linux distribution: ${dist_name}"
                exit -1
            fi
        else
            echo "Could not determine Linux distribution name"
            exit "${res}"
        fi

        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# ----------------------------------------a-------------------------------------
# process command line arguments

# TODO: repo root isn't used, this is just for API consistency

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to the root folder of the repository to process
# on Debian, install realpath using e.g. aptitude install realpath
# on OS X, use grealpath: http://apple.stackexchange.com/a/88812
repo_root="$(realpath "$1")"

# absolute path to GPG key passphrase file
passphrase_file="${HOME}/.secrets/package_server_passphrase"

# local file with
# these assume packages being uploaded were built on this host
# and there is no "cross-package-building" taking place, ie.
# no creating Debian 32-bit packages on a Ubuntu 64-bit host

# determine Linux distribution (e.g. Debian, Ubuntu)
distribution=$(lsb_release --id --short | tr '[:upper:]' '[:lower:]')

# determine architecture to determine distribution bitness (e.g. i386, amd64)
arch=$(arch)

if   [[ "${arch}" == 'i686' ]]
    then architecture='i386'
elif [[ "${arch}" == 'x86_64' ]]
    then architecture='amd64'
else
    echo "Unsupported architecture ${arch}"
    exit -1
fi

# determine git branch to determine distribution channel
git_branch=$(git -C "${repo_root}" rev-parse --symbolic-full-name --abbrev-ref HEAD)

if [[ "${git_branch}" != 'develop' && \
      "${git_branch}" !=  feature* && \
      "${git_branch}" != 'master'  && \
      "${git_branch}" !=  release* ]]
then
    echo "Unsupported git branch / distribution channel ${git_branch}"
    exit -1
fi

if   [[ "${git_branch}" ==  'develop' ]]
    then distribution_channel='develop'
elif [[ "${git_branch}" ==   feature* ]]
    then distribution_channel='feature'
elif [[ "${git_branch}" ==  'master'  ]]
    then distribution_channel='master'
elif [[ "${git_branch}" ==   release* ]]
    then distribution_channel='release'
fi

# user with write privileges on distribution channels
declare -A channel_2_user_map

# shellcheck disable=SC2154
channel_2_user_map["develop"]="bob.the.builder:id_rsa_bob.the.builder"
# shellcheck disable=SC2154
channel_2_user_map["feature"]="dd:id_rsa_desmodyne"
# shellcheck disable=SC2154
channel_2_user_map["master"]="bob.the.builder:id_rsa_bob.the.builder"
# shellcheck disable=SC2154
channel_2_user_map["release"]="bob.the.builder:id_rsa_bob.the.builder"

user_info="${channel_2_user_map[${distribution_channel}]}"

# name of remote server; defined by us
# NOTE: 'update' server name is defined in DesmoDyne corporate name server
remote_server='update'

# name of the user to log in as on the remote server
remote_user="$(echo "${user_info}" | cut -d : -f 1)"


# TODO: see dd-upload-artifacts
if [ "$(hostname)" = 'vm-build-nice' ]
then
    SSH_AUTH_SOCK='/home/bob.the.builder/.ssh/ssh_auth_sock'
fi

# TODO: do these require the same SSH key work as in dd-upload-artifacts ?


# -----------------------------------------------------------------------------
# update package index on distribution server

ssh_cmd_line="dd-update-package-index ${distribution} " \
ssh_cmd_line+="${architecture} ${distribution_channel}"
# shellcheck disable=SC2029
ssh "${remote_user}@${remote_server}" "${ssh_cmd_line}"

# -----------------------------------------------------------------------------
# update release signature on distribution server

ssh_cmd_line="dd-update-release-signature ${distribution} " \
ssh_cmd_line+="${architecture} ${distribution_channel}"
# shellcheck disable=SC2029
ssh "${remote_user}@${remote_server}" "${ssh_cmd_line}" < "${passphrase_file}"


echo
echo 'dd-update-package-server: success'
echo
