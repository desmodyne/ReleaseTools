#!/usr/bin/env bash

# dd-upload
#
# upload artifacts and update package server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-11


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    darwin*)
        do_update_formula_repo=true
        ;;
    linux*)
        do_update_formula_repo=false
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to the root folder of the repository to process
repo_root="$(realpath "$1")"

# list of tools called by this script
req_tools='dd-update-formula-repo dd-update-package-server dd-upload-artifacts'

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"


# -----------------------------------------------------------------------------
# determine path to other ReleaseTools scripts

# In production, all ReleaseTools scripts are installed  using a distribution
# package and any (ReleaseTools or other, e.g. Linux system) tools are found
# in PATH; during development, this is not necessarily the case: Test if all
# tools are found and if one is missing, append the path this script resides in
# to PATH and retry. This does not mix package / production and development
# versions, either all ReleaseTools scripts are taken from PATH or from local.

amended_path=false

for req_tool in ${req_tools}
do
    if [ -z "$(which "${req_tool}")" ]
    then
        echo "${req_tool}: No such file or directory; amending PATH and retry"
        PATH="${path_to_this_script}:${PATH}"
        amended_path=true
    fi
done

if [ "${amended_path}" = true ]
then
    for req_tool in ${req_tools}
    do
        if [ -z "$(which "${req_tool}")" ]
        then
            echo "${req_tool}: No such file or directory"
            exit -1
        fi
    done
fi


# -----------------------------------------------------------------------------
# call the other scripts in the designated order

# TODO: this must not be done mindlessly, but only after (manual) test
# and approval, so there should at least be a warning when this is run

if [ "${do_update_formula_repo}" = true ]
then
    dd-update-formula-repo "${repo_root}"
    res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi
fi

dd-upload-artifacts "${repo_root}"
res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi

# TODO: should this really be done here ?

dd-update-package-server "${repo_root}"
res="$?"; if [ "${res}" -ne 0 ]; then exit "${res}"; fi
