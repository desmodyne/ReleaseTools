#!/usr/bin/env bash

# dd-push-release-branch
#
# push a release branch to remote git repo
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-06


echo
echo 'dd-push-release-branch:'
echo

# -----------------------------------------------------------------------------
# process command line arguments

if [ $# -ne 1 ]
then
    echo "Usage: $(basename "$0") <repository root folder>"
    exit -1
else
    if [ ! -e "$1" ]
    then
        echo "$1: No such file or directory"
        exit -1
    fi
    if [ ! -d "$1" ]
    then
        echo "$1: Not a directory"
        exit -1
    fi
fi

# TODO: prevent processing repo this file is in during development ?
# TODO: verify required executables are available before using them ?
# TODO: script return value when run as Jenkins job ?!?
# TODO: add leading zero to calender week in release name


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to the root folder of the repository to process
repo_root="$(realpath "$1")"

# release branch prefix; 'release' as per git flow convention
rel_prefix='release'

# name of the release, follows YYYY.CW pattern; as a release is created to
# publish the efforts of the past week, the calender week is that of last week
release_name="$(date +"%Y").$(( $(date +"%V") - 1))"


# NOTE: pushd / popd require bash
pushd "${repo_root}" > /dev/null


# -----------------------------------------------------------------------------
# push the release branch

# NOTE: this script expects to be called in the following context:
# dd-release has started a release, bumped the patch version and created
# release notes; the target repo is on the release branch and there are no
# tags yet; only the release branch needs to be pushed to origin

# TODO: deal with improperly set up remotes not using 'origin':
# git flow heavily relies on that convention:
#   fatal: No configured push destination.
#   Either specify the URL from the command-line or configure a remote repository using
#       git remote add <name> <url>
#   and then push using the remote name
#       git push <name>

# NOTE: 'git push' alone fails with e.g.
# fatal: The current branch release/2016.22 has no upstream branch.
# To push the current branch and set the remote as upstream, use
#     git push --set-upstream origin release/2016.22

echo "Push release branch ${rel_prefix}/${release_name} to origin:"
git push origin --set-upstream "${rel_prefix}/${release_name}"

res="$?"

if [ "${res}" -ne 0 ]
then
    # git push prints its own error messages
    popd > /dev/null
    exit "${res}"
fi


popd > /dev/null


echo
echo 'dd-push-release-branch: success'
echo
