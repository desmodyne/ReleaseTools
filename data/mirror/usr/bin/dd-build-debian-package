#!/usr/bin/env bash

# dd-build-debian-package
#
# build Debian package
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-01


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    linux*)
        dist_name=$(lsb_release --id --short)

        res="$?"

        if [ "${res}" -eq 0 ]
        then
            # make sure this is run only on Debian / Ubuntu systems
            if [ "${dist_name}" != 'Debian' -a "${dist_name}" != 'Ubuntu' ]
            then
                echo "Unsupported Linux distribution: ${dist_name}"
                exit -1
            fi
        else
            echo "Could not determine Linux distribution name"
            exit "${res}"
        fi

        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# relative path from this script to project root
rel_path_to_project_root='../../../..'

# absolute path to project root
# on Debian, install realpath using e.g. aptitude install realpath
# on OS X, use grealpath: http://apple.stackexchange.com/a/88812
path_to_project_root="$(realpath "${path_to_this_script}/${rel_path_to_project_root}")"

# get project name from project root folder
project_name="$(basename "${path_to_project_root}")"

# path to temporary working folder, relative to project root
working_folder='../tmp/deploy'

# path from working folder back to project root
path_from_working_folder_to_project_root="../../${project_name}"


# -----------------------------------------------------------------------------
# build debian package


# change to project root directory
pushd "${path_to_project_root}" > /dev/null


# remove and (re-) create temporary working folder
if [ -d "${working_folder}" ]
then
    rm -r "${working_folder}"
fi
mkdir -p "${working_folder}"

# change to working folder
pushd "${working_folder}" > /dev/null

# delete files OS X keeps creating so they are not added to the package;
# this occurs with project spaces shared between OSs, e.g. using sshfs
find . \( -iname '._*' -or -iname '.DS_Store' \) -delete

# build the package
cmake "${path_from_working_folder_to_project_root}/build"
make "${project_name}-package"

# change back to previous location
popd > /dev/null


# change back to previous location
popd > /dev/null
