#!/usr/bin/env bash

# dd-rt-verify-user-configuration
#
# verify git configuration for current user
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-16


# NOTE: see also ./dd-rt-release


echo
echo 'verify git user configuration'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# name of ReleaseTools library file
name_of_rt_lib='dd-rt-library.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('git' 'jq' 'realpath')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# configure script parameters

# string to mark the line before relevant output on stdout
# shellcheck disable=SC2154
marker_start="${dd_bashlib_marker_start}"

# string to mark the line after relevant output on stdout
# shellcheck disable=SC2154
marker_end="${dd_bashlib_marker_end}"


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi

echo -n 'Get ReleaseTools environment: '
if output="$(get_environment "${here}" 2>&1)"
then
    echo 'OK'
    env_json="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# NOTE: see also BashLib > get_environment function documentation
sedex="/${marker_start}/,/${marker_end}/!d;/${marker_end}/q"
env_json="$(sed "${sedex}" <<< "${env_json}" 2>&1)"
env_json="$(sed '1d;$d'    <<< "${env_json}" 2>&1)"


# -----------------------------------------------------------------------------
# configure script parameters

environment="$(jq -r '.environment' <<< "${env_json}")"

if   [ "${environment}" = 'development' ]
then
    # path to library folder in development, relative to project root
    path_to_lib_dev="code/lib"

    # path from this script to project root
    path_to_proj_root='../..'

    # absolute, canonical path to project root
    path_to_proj_root="$(realpath "${here}/${path_to_proj_root}")"

    # absolute path to configuration root folder
    path_to_lib_root="${path_to_proj_root}/${path_to_lib_dev}"

    # absolute, canonical path to configuration file
    path_to_rt_lib="${path_to_lib_root}/${name_of_rt_lib}"

elif [ "${environment}" = 'production'  ]
then
    # path to library folder in production, relative to installation root
    path_to_lib_prod="lib"

    # absolute path to brew package installation root
    path_to_inst_root="$(brew --prefix)"

    # absolute path to configuration root folder
    path_to_lib_root="${path_to_inst_root}/${path_to_lib_prod}"

    # absolute, canonical path to configuration file
    path_to_rt_lib="${path_to_lib_root}/${name_of_rt_lib}"

else
    echo 'failed to determine RepoTools environment'
    exit 1
fi


# -----------------------------------------------------------------------------
# load ReleaseTools library

# shellcheck disable=SC1090
if output="$(source "${path_to_rt_lib}" 2>&1)"
then
    source "${path_to_rt_lib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run ReleaseTools boilerplate functions

if ! get_script_args "${@}"; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute, canonical path to the target project / repository root folder
repo_root="$(realpath "${repo_root}")"

# absolute path to target project configuration file
# shellcheck disable=SC2154
path_to_conf_file="${repo_root}/${path_to_target_conf}"


# -----------------------------------------------------------------------------
# load script configuration

# shellcheck disable=SC2034
attrs=(version)
# shellcheck disable=SC2034
opt_attrs=()

echo
echo 'Load script configuration file:'
if ! get_attrs_from_yaml_file "${path_to_conf_file}" attrs opt_attrs
then
    exit 1
fi


# -----------------------------------------------------------------------------
# verify user configuration

echo
echo -n 'Verify user git configuration: '

git_username="$( git -C "${repo_root}" config user.name)"
git_useremail="$(git -C "${repo_root}" config user.email)"

if [ -n "${git_username}" ] && [ -n "${git_useremail}" ]
then
    echo 'OK'
else
    echo 'incomplete'

    current_username="$(id -u -n)"

    # set details for known users automatically
    # TODO: align this with convention:
    # mapfile -t known_users < <(jq -r 'keys[]' <<< "${users}")
    # shellcheck disable=SC2154
    mapfile -t known_users <<< "$(jq -r 'keys[]' <<< "${users}")"

    if ! grep -q "${current_username}" <<< "${known_users[*]}"
    then
        # shellcheck disable=SC2154
        echo "${err_msg_git_conf}"
        echo
        exit 1
    else
        username="$(jq -r ".[\"${current_username}\"].name"  <<< "${users}")"
        email="$(   jq -r ".[\"${current_username}\"].email" <<< "${users}")"

        echo "configure settings for known user ${current_username}:"

        echo -n "  git config user.name '${username}': "
        if output="$(git -C "${repo_root}" config user.name "'${username}'")"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "    ${output}"
            exit 1
        fi

        echo -n "  git config user.email '${email}': "
        if output="$(git -C "${repo_root}" config user.email "'${email}'")"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "    ${output}"
            exit 1
        fi
    fi
fi


echo
echo 'git user configuration verification complete'
echo
