#!/usr/bin/env bash

# dd-rt-push-release-branch
#
# push a release branch to remote git repo
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-06


# NOTE: see also ./dd-rt-release


echo
echo 'push release branch'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# name of ReleaseTools library file
name_of_rt_lib='dd-rt-library.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('git' 'jq' 'realpath')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# configure script parameters

# string to mark the line before relevant output on stdout
# shellcheck disable=SC2154
marker_start="${dd_bashlib_marker_start}"

# string to mark the line after relevant output on stdout
# shellcheck disable=SC2154
marker_end="${dd_bashlib_marker_end}"


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi

echo -n 'Get ReleaseTools environment: '
if output="$(get_environment "${here}" 2>&1)"
then
    echo 'OK'
    env_json="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# NOTE: see also BashLib > get_environment function documentation
sedex="/${marker_start}/,/${marker_end}/!d;/${marker_end}/q"
env_json="$(sed "${sedex}" <<< "${env_json}" 2>&1)"
env_json="$(sed '1d;$d'    <<< "${env_json}" 2>&1)"


# -----------------------------------------------------------------------------
# configure script parameters

environment="$(jq -r '.environment' <<< "${env_json}")"

if   [ "${environment}" = 'development' ]
then
    # path to library folder in development, relative to project root
    path_to_lib_dev="code/lib"

    # path from this script to project root
    path_to_proj_root='../..'

    # absolute, canonical path to project root
    path_to_proj_root="$(realpath "${here}/${path_to_proj_root}")"

    # absolute path to configuration root folder
    path_to_lib_root="${path_to_proj_root}/${path_to_lib_dev}"

    # absolute, canonical path to configuration file
    path_to_rt_lib="${path_to_lib_root}/${name_of_rt_lib}"

elif [ "${environment}" = 'production'  ]
then
    # path to library folder in production, relative to installation root
    path_to_lib_prod="lib"

    # absolute path to brew package installation root
    path_to_inst_root="$(brew --prefix)"

    # absolute path to configuration root folder
    path_to_lib_root="${path_to_inst_root}/${path_to_lib_prod}"

    # absolute, canonical path to configuration file
    path_to_rt_lib="${path_to_lib_root}/${name_of_rt_lib}"

else
    echo 'failed to determine RepoTools environment'
    exit 1
fi


# -----------------------------------------------------------------------------
# load ReleaseTools library

# shellcheck disable=SC1090
if output="$(source "${path_to_rt_lib}" 2>&1)"
then
    source "${path_to_rt_lib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run ReleaseTools boilerplate functions

if ! get_script_args "${@}"; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute, canonical path to the target project / repository root folder
repo_root="$(realpath "${repo_root}")"

# absolute path to target project configuration file
# shellcheck disable=SC2154
path_to_conf_file="${repo_root}/${path_to_target_conf}"

# absolute path to release notes folder
# shellcheck disable=SC2154
path_to_release_notes="${repo_root}/${path_to_release_notes}"

# arguments passed to git (not to a sub-command) with every call
git_args=('-C' "${repo_root}")


# -----------------------------------------------------------------------------
# load script configuration

# shellcheck disable=SC2034
attrs=(version)
# shellcheck disable=SC2034
opt_attrs=()

echo
echo 'Load script configuration file:'
if ! get_attrs_from_yaml_file "${path_to_conf_file}" attrs opt_attrs
then
    exit 1
fi


# -----------------------------------------------------------------------------
# configure script parameters

# shellcheck disable=SC2154
major="$(jq -r '.major' <<< "${version}")"
minor="$(jq -r '.minor' <<< "${version}")"
patch="$(jq -r '.patch' <<< "${version}")"

release_name="${major}.${minor}.${patch}"


# -----------------------------------------------------------------------------
# push the release branch


# TODO: create script to verify these prerequisites and run earlier than here

# NOTE: this script expects to be called in the following context:
# dd-rt-release has started a release, updated the project version and created
# release notes; the target repo is on the release branch and there are no
# tags yet; only the release branch needs to be pushed to origin

# TODO: deal with improperly set up remotes not using 'origin':
# git flow heavily relies on that convention:
#   fatal: No configured push destination.
#   Either specify the URL from the command-line or configure a remote repository using
#       git remote add <name> <url>
#   and then push using the remote name
#       git push <name>


echo

# NOTE: 'git push' alone fails with e.g.
# fatal: The current branch release/2016.22 has no upstream branch.
# To push the current branch and set the remote as upstream, use
#     git push --set-upstream origin release/2016.22

# shellcheck disable=SC2154
branch_name="${branch_release_prefix}/${release_name}"

# shellcheck disable=SC2154
echo -n "Push release branch ${branch_name} to ${remote_default_name}: "
if output="$(git "${git_args[@]}" push "${remote_default_name}" \
               --set-upstream "${branch_name}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi


echo
echo 'release branch push complete'
echo
