#!/usr/bin/env bash

# dd-update-project-version
#
# update semantic version in project configuration
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-03


# major.minor.patch: http://semver.org
# https://en.wikipedia.org/wiki/Software_versioning


echo
echo 'update project version'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
path_to_proj_root='../..'

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# path to ReleaseTools library file, relative to project root
path_to_rt_lib='code/bin/dd-rt-library.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('git' 'jq' 'realpath' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib library

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# absolute, canonical path to project root
path_to_proj_root="$(realpath "${here}/${path_to_proj_root}")"

# absolute, canonical path to ReleaseTools library file
path_to_rt_lib="${path_to_proj_root}/${path_to_rt_lib}"


# -----------------------------------------------------------------------------
# load ReleaseTools library

# shellcheck disable=SC1090
if output="$(source "${path_to_rt_lib}" 2>&1)"
then
    source "${path_to_rt_lib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run ReleaseTools boilerplate functions

if ! get_script_args_opt_arg "${@}"; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters, cont. 2

# absolute, canonical path to the target project / repository root folder
repo_root="$(realpath "${repo_root}")"

# absolute path to target project configuration file
# shellcheck disable=SC2154
conf_file="${repo_root}/${path_to_target_conf}"

# arguments passed to git (not to a sub-command) with every call
git_args=('-C' "${repo_root}")


# -----------------------------------------------------------------------------
# load script configuration

echo

echo -n 'Load script configuration file: '
# shellcheck disable=SC2154
if output="$(yq read "${conf_file}" --tojson 2>&1)"
then
    echo 'OK'
    config="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Extract script configuration attributes: '
# TODO: remove once more attributes
# shellcheck disable=SC2043
for attr in version
do
    output="$(jq -r ".${attr}" <<< "${config}")"
    # https://unix.stackexchange.com/a/68349
    # https://unix.stackexchange.com/a/41418
    if [ -n "${output}" ] && [ "${output}" != 'null' ]
    then
        declare "${attr}"="${output}"
    else
        echo 'ERROR'
        echo "Failed to get ${attr} attribute from configuration"
        exit 1
    fi
done
echo 'OK'


# -----------------------------------------------------------------------------
# configure script parameters, cont. 3

# shellcheck disable=SC2154
old_major="$(jq -r '.major' <<< "${version}")"
old_minor="$(jq -r '.minor' <<< "${version}")"
old_patch="$(jq -r '.patch' <<< "${version}")"

# if no explicit version is passed as cmd line arg,
# increment the one defined in project > version conf
# shellcheck disable=SC2154
if [ -z "${semver}" ]
then
    new_major="${old_major}"
    new_minor="${old_minor}"
    new_patch=$((old_patch + 1))

    semver="${new_major}.${new_minor}.${new_patch}"

# otherwise validate the cmd line arg and use it if valid
else
    current_semver="${old_major}.${old_minor}.${old_patch}"

    # TODO: handle leading zeroes in cmd line arg ?
    if [[ ! "${semver}" > "${current_semver}" ]]
    then
        # shellcheck disable=SC2059
        msg="$(printf "${err_msg_git_conf}" \
                      "${semver}" "${current_semver}" "${conf_file}")"
        echo "${msg}"
        exit 1
    fi

    new_major="$("${gsed}" -e "${sedex_semver_major}" <<< "${semver}")"
    new_minor="$("${gsed}" -e "${sedex_semver_minor}" <<< "${semver}")"
    new_patch="$("${gsed}" -e "${sedex_semver_patch}" <<< "${semver}")"
fi


# -----------------------------------------------------------------------------
# update project version

# NOTE: extra work to maintain formatting and comments in configuration file
# NOTE: this opens conf_file a second time, this time accessing text natively

sedex_yaml_version="$(printf "${sedex_yaml_version_tmpl}"                   \
                             "${old_major}" "${old_minor}" "${old_patch}"   \
                             "${new_major}" "${new_minor}" "${new_patch}")"

echo -n 'Create new version section: '
# https://unix.stackexchange.com/a/152389
# TODO: this leaks errors displayed by earlier commands
if output="$(cat "${conf_file}"                     \
              | tr '\n' '\r'                        \
              | "${sed}" -e "${sedex_yaml_version}" \
              | tr '\r' '\n')"
then
    echo 'OK'
    config="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Save version section to conf file: '
# TODO: does this pipe errors into the file ?
if output="$(echo "${config}" > "${conf_file}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Stage changes to conf file: '
if output="$(git "${git_args[@]}" add "${conf_file}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR:'
    echo "${output}"
    exit 1
fi

commit_msg="$(printf "${commit_msg_version_tmpl}" "${release_name}")"

echo -n 'commit changes to conf file: '
# shellcheck disable=SC2154
if output="$(git "${git_args[@]}" commit \
               -m "${commit_msg_version}" "${conf_file}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR:'
    echo "${output}"
    exit 1
fi


echo
echo 'project version update complete'
echo
