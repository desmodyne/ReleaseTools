#!/usr/bin/env bash

# dd-verify-user-configuration
#
# verify git configuration for current user
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-16


# NOTE: see also ./dd-release


echo
echo 'verify git configuration'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
path_to_proj_root='../..'

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# path to ReleaseTools library file, relative to project root
path_to_rt_lib='code/bin/dd-rt-library.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('git' 'jq' 'realpath' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib library

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# absolute, canonical path to project root
path_to_proj_root="$(realpath "${here}/${path_to_proj_root}")"

# absolute, canonical path to ReleaseTools library file
path_to_rt_lib="${path_to_proj_root}/${path_to_rt_lib}"


# -----------------------------------------------------------------------------
# load ReleaseTools library

# shellcheck disable=SC1090
if output="$(source "${path_to_rt_lib}" 2>&1)"
then
    source "${path_to_rt_lib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run ReleaseTools boilerplate functions

if ! get_script_args "${@}"; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters, cont. 2

# absolute, canonical path to the target project / repository root folder
repo_root="$(realpath "${repo_root}")"

# absolute path to target project configuration file
# shellcheck disable=SC2154
conf_file="${repo_root}/${path_to_target_conf}"


# -----------------------------------------------------------------------------
# load script configuration

echo

echo -n 'Load script configuration file: '
# shellcheck disable=SC2154
if output="$(yq read "${conf_file}" --tojson 2>&1)"
then
    echo 'OK'
    config="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Extract script configuration attributes: '
# TODO: remove once more attributes
# shellcheck disable=SC2043
for attr in users
do
    output="$(jq -r ".${attr}" <<< "${config}")"
    # https://unix.stackexchange.com/a/68349
    # https://unix.stackexchange.com/a/41418
    if [ -n "${output}" ] && [ "${output}" != 'null' ]
    then
        declare "${attr}"="${output}"
    else
        echo 'ERROR'
        echo "Failed to get ${attr} attribute from configuration"
        exit 1
    fi
done
echo 'OK'


# -----------------------------------------------------------------------------
# verify user configuration

echo -n 'Verify user git configuration: '

git_username="$( git -C "${repo_root}" config user.name)"
git_useremail="$(git -C "${repo_root}" config user.email)"

if [ -n "${git_username}" ] && [ -n "${git_useremail}" ]
then
    echo 'OK'
else
    echo 'incomplete'

    current_username="$(id -u -n)"

    # set details for known users automatically
    # shellcheck disable=SC2154
    mapfile -t known_users <<< "$(jq -r 'keys[]' <<< "${users}")"

    if ! grep -q "${current_username}" <<< "${known_users[*]}"
    then
        # shellcheck disable=SC2154
        echo "${err_msg_git_conf}"
        echo
        exit 1
    else
        username="$(jq -r ".[\"${current_username}\"].name"  <<< "${users}")"
        email="$(   jq -r ".[\"${current_username}\"].email" <<< "${users}")"

        echo "configure settings for known user ${current_username}:"

        echo -n "  git config user.name '${username}': "
        if output="$(git -C "${repo_root}" config user.name "'${username}'")"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "    ${output}"
            exit 1
        fi

        echo -n "  git config user.email '${email}': "
        if output="$(git -C "${repo_root}" config user.email "'${email}'")"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "    ${output}"
            exit 1
        fi
    fi
fi


echo
echo 'git configuration verification complete'
echo
